[tool.poetry]
name = "py3-tts-wrapper"
version = "0.9.7"
description = "TTS-Wrapper makes it easier to use text-to-speech APIs by providing a unified and easy-to-use interface."
authors = ["Giulio Bottari <giuliobottari@gmail.com>","Will Wade <willwade@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/willwade/tts-wrapper"
documentation = "https://github.com/willwade/tts-wrapper"
keywords = [ "tts", "text-to-speech", "speech synthesis", "polly", "sapi", "mms", "gTTS", "witai", "elevenlabs" ]
packages = [{include = "tts_wrapper"}]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/willwade/tts-wrapper/issues"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
requests = { version = "^2.31.0", optional = true }
numpy = [
    { version = "1.24.3", python = "~3.10", optional = false },
    { version = "1.26.4", python = ">=3.11", optional = false }
]
sounddevice = "^0.5.0"
soundfile = "^0.12.1"
boto3 = {version = "^1.34.137", optional = true}
ibm-watson = {version = "^8.1.0", optional = true}
google-cloud-texttospeech = {version = "^2.12.0", optional = true}
pyttsx3 = {version = "^2.98", optional = true}
azure-cognitiveservices-speech = {version = "^1.15.0",  optional = true}
winrt-runtime = { version = "^2.0.1", markers = "sys_platform == 'win32'", optional = true }
sherpa-onnx ={ version = "^1.10.17", optional = true }
gTTS={ version = "^2.5.2", optional = true }
pymp3 = "^0.2.0"
pyaudio = {version = "^0.2.14", optional = true }

[tool.poetry.extras]
google = ["google-cloud-texttospeech"]
watson = ["ibm-watson", "websocket", "requests"]
polly = ["boto3"]
microsoft = ["azure.cognitiveservices.speech"]
elevenlabs = ["requests","numpy"]
witai = ["requests"]
systemtts = ["pyttsx3"]
uwp = ["winrt_windows.media.speechsynthesis","winrt_windows.storage.streams","winrt_windows.foundationtime"]
sherpaonnx = ["sherpa-onnx", "requests", "numpy"]
googletrans = ["gTTS"]
controlaudio = ["pyaudio"]
espeak = []

[tool.poetry.group.dev.dependencies]
pyinstrument = "^4.7.3"
pytest = "^6.2.1"
pytest-mock = "^3.5.1"
black = {version = "^22.1.0", allow-prereleases = true}
types-requests = "^2.27.31"
mypy = "^0.971"
types-boto3 = "^1.0.2"
pytest-cov = "^3.0.0"
filetype = "^1.0.13"
wheel = "^0.43.0"
setuptools = "^71.1.0"
flake8 = "^7.1.1"
ruff = "^0.7.3"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.poetry.scripts]
postinstall = "scripts.install_dependencies:main"

[tool.poetry-dynamic-versioning]
enable = true

[tool.pytest.ini_options]
markers = [
    "synthetic: mark a test as synthetic"
]

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
exclude = [
    "./examples/**/*"
]
select = [
  "AIR",    # Airflow
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "C90",    # McCabe cyclomatic complexity
  "DJ",     # flake8-django
  "DTZ",    # flake8-datetimez
  "E",      # pycodestyle
  "EM",     # flake8-errmsg
  "EXE",    # flake8-executable
  "F",      # Pyflakes
  "FA",     # flake8-future-annotations
  "FLY",    # flynt
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "INP",    # flake8-no-pep420
  "INT",    # flake8-gettext
  "ISC",    # flake8-implicit-str-concat
  "LOG",    # flake8-logging
  "NPY",    # NumPy-specific rules
  "PD",     # pandas-vet
  "PERF",   # Perflint
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "PL",     # Pylint
  "PT",     # flake8-pytest-style
  "PTH",    # flake8-use-pathlib
  "PYI",    # flake8-pyi
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "T10",    # flake8-debugger
  "TCH",    # flake8-type-checking
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # pycodestyle
  "YTT",    # flake8-2020
  # "A",    # flake8-builtins
  # "ANN",  # flake8-annotations
  # "ARG",  # flake8-unused-arguments
  # "COM",  # flake8-commas
  # "CPY",  # flake8-copyright
  # "D",    # pydocstyle
  # "DOC",  # pydoclint
  # "ERA",  # eradicate
  # "FAST", # FastAPI
  # "FBT",  # flake8-boolean-trap
  # "FIX",  # flake8-fixme
  # "N",    # pep8-naming
  # "Q",    # flake8-quotes
  # "S",    # flake8-bandit
  # "SLF",  # flake8-self
  # "T20",  # flake8-print
  # "TD",   # flake8-todos
  # "TRY",  # tryceratops
]
ignore = [
  "B904",   #	raise-without-from-inside-except
  "BLE001", # blind-except
  "D212",   # Multi-line docstring summary should start at the first line
  "ISC001", # implicit-str-concat conflicts with ruff format
  "S101",   #	assert
  "ERA001"
]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str"]