
name: Build, Test, and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.8.3"

      - name: Install poetry-dynamic-versioning plugin
        run: poetry self add poetry-dynamic-versioning

      - name: Enable dynamic versioning
        run: poetry dynamic-versioning

      - name: Update package index and install dependencies
        run: |
          poetry install --with dev 
          poetry install -E google -E watson -E polly -E microsoft -E googletrans -E witai -E elevenlabs -E systemtts
          poetry run postinstall

      - name: Build package
        run: poetry build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    env:
      WATSON_API_KEY: ${{ secrets.WATSON_API_KEY }}
      WATSON_API_URL: ${{ secrets.WATSON_API_URL }}
      WATSON_REGION: ${{ secrets.WATSON_REGION }}
      WATSON_INSTANCE_ID: ${{ secrets.WATSON_INSTANCE_ID }}
      MICROSOFT_TOKEN: ${{ secrets.MICROSOFT_TOKEN }}
      MICROSOFT_REGION: ${{ secrets.MICROSOFT_REGION }}
      POLLY_REGION: ${{ secrets.POLLY_REGION }}
      POLLY_AWS_KEY_ID: ${{ secrets.POLLY_AWS_KEY_ID }}
      POLLY_AWS_ACCESS_KEY: ${{ secrets.POLLY_AWS_ACCESS_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      WITAI_TOKEN: ${{ secrets.WITAI_TOKEN }}
      GOOGLE_SA_PATH: ${{ secrets.GOOGLE_SA_PATH }}
      GOOGLE_SA_FILE_B64: ${{ secrets.GOOGLE_SA_FILE_B64 }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install system dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y portaudio19-dev libttspico-utils ffmpeg

      - name: Install system dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install portaudio ffmpeg

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.8.3"

      - name: Update package index and install dependencies
        run: |
          poetry install --with dev 
          poetry install -E google -E watson -E polly -E microsoft -E googletrans -E witai -E elevenlabs -E controlaudio
          poetry run postinstall

      - name: Run tests with coverage
        run: poetry run pytest --cov=tts_wrapper -m "not synthetic"

      - name: Run all tests with Makefile
        run: poetry run make tests

  publish:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: List contents of dist after download
        run: ls -R dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
